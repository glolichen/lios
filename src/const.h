#ifndef CONST_H
#define CONST_H

#include <stdint.h>

typedef int8_t i8;
typedef uint8_t u8;
typedef int16_t i16;
typedef uint16_t u16;
typedef int32_t i32;
typedef uint32_t u32;
typedef int64_t i64;
typedef uint64_t u64;

#define PRINT_INFO_SERIAL 1
#define KERNEL_OFFSET 0xFFFFFFFF80000000

#define GET_SERIAL_DATA_PORT(base) (base)
#define GET_SERIAL_FIFO_COMMAND_PORT(base) (base + 2)
#define GET_SERIAL_LINE_COMMAND_PORT(base) (base + 3)
#define GET_SERIAL_MODEM_COMMAND_PORT(base) (base + 4)
#define GET_SERIAL_LINE_STATUS_PORT(base) (base + 5)

#define MAKE_COLOR(fg, bg) (((bg & 0xF) << 4) | (fg & 0xF))

enum FBColor {
	BLACK = 0,
	BLUE = 1,
	GREEN = 2,
	CYAN = 3,
	RED = 4,
	MAGENTA = 5,
	BROWN = 6,
	LIGHT_GRAY = 7,
	DARK_GRAY = 8,
	LIGHT_BLUE = 9,
	LIGHT_GREEN = 10,
	LIGHT_CYAN = 11,
	LIGHT_RED = 12,
	LIGHT_MAGENTA = 13,
	LIGHT_BROWN = 14,
	WHITE = 15
};

#define FB_ROWS 25
#define FB_COLS 80
#define FB_COMMAND_PORT 0x3D4
#define FB_DATA_PORT 0x3D5
#define FB_COMMAND_LOW_BYTE_COMMAND 14
#define FB_COMMAND_HIGH_BYTE_COMMAND 15

#define U16_LOW_BYTE 0x00FF
#define U16_HIGH_BYTE 0xFF00

#define SERIAL_COM1_BASE 0x3F8
#define SERIAL_LINE_ENABLE_DLAB 0x80

#define FB_ADDRESS (KERNEL_OFFSET + 0xB8000)
#define FRAMEBUFFER_SIZE (1024 * 768 * 4)

#define PICM 0x20
#define PICS 0xA0
#define PICM_COMMAND PICM
#define PICS_COMMAND PICS
#define PICM_DATA (PICM + 1)
#define PICS_DATA (PICS + 1)
#define PIC_EOI 0x20

extern const char *EXCEPTIONS[];

extern const char *MULTIBOOT_ENTRY_TYPES[];

extern const char *KEYCODES[];
extern const u32 MAX_KEYCODE;

enum PML4E_PDPE_PDE_Flags {
	PML4E_PDPE_PDE_PRESENT = 0x1,
	PML4E_PDPE_PDE_WRITABLE = 0x2,
	PML4E_PDPE_PDE_USER = 0x4,
	PML4E_PDPE_PDE_WRITETHROUGH = 0x8,
	PML4E_PDPE_PDE_CACHE_DISABLE = 0x10,
	PML4E_PDPE_PDE_ACCESSED = 0x20,
};
enum PTE_Flags {
	PTE_PRESENT = 0x1,
	PTE_WRITABLE = 0x2,
	PTE_USER = 0x4,
	PTE_WRITETHROUGH = 0x8,
	PTE_CACHE_DISABLE = 0x10,
	PTE_ACCESSED = 0x20,
	PTE_DIRTY = 0x40,
	PTE_PAT = 0x80,
	PTE_GLOBAL = 0x100,
};

typedef u64 PML4E;
typedef u64 PDPE;
typedef u64 PDE;
typedef u64 PTE;
typedef struct {
	PML4E table[512];
} PML4;
typedef struct {
	PDPE table[512];	
} PDPT;
typedef struct {
	PDE table[512];
} PDT;
typedef struct {
	PTE table[512];	
} PT;

typedef u64 PhysicalAddress;

// exceptions
enum {
	EXCEPT_DIVISION,
	EXCEPT_DEBUG,
	EXCEPT_NON_MASKABLE_INTERRUPT,
	EXCEPT_BREAKPOINT,
	EXCEPT_OVERFLOW,
	EXCEPT_BOUND_RANGE_EXCEEDED,
	EXCEPT_INVALID_OPCODE,
	EXCEPT_DEVICE_NOT_AVAILABLE,
	EXCEPT_DOUBLE_FAULT,
	EXCEPT_COPROCESSOR_SEGMENT_OVERRUN,
	EXCEPT_INVALID_TSS,
	EXCEPT_SEGMENT_NOT_PRESENT,
	EXCEPT_STACK_SEGMENT_FAULT,
	EXCEPT_GENERAL_PROTECTION_FAULT,
	EXCEPT_PAGE_FAULT,
	EXCEPT_RESERVED_15,
	EXCEPT_X87_FP,
	EXCEPT_ALIGNMENT_CHECK,
	EXCEPT_MACHINE_CHECK,
	EXCEPT_SIMD_FP,
	EXCEPT_VIRTUALIZATIO,
	EXCEPT_CONTROL_PROTECTION,
	EXCEPT_RESERVED_22,
	EXCEPT_RESERVED_23,
	EXCEPT_RESERVED_24,
	EXCEPT_RESERVED_25,
	EXCEPT_RESERVED_26,
	EXCEPT_RESERVED_27,
	EXCEPT_HYPERVISOR_INJECTION,
	EXCEPT_VMM_COMMUNICATION,
	EXCEPT_SECURIY,
	EXCEPT_RESERVED_31
};

// interrupts
enum {
	INT_TIMER,
	INT_KEYBOARD,
	INT_CASCADE,
	INT_COM2,
	INT_COM1,
	INT_LPT2,
	INT_FLOPPY_DISK,
	INT_LPT1_SPURIOUS,
	INT_CMOS_CLOCK,
	INT_FREE_9,
	INT_FREE_10,
	INT_FREE_11,
	INT_PS2_MOUSE,
	INT_FPU,
	INT_PRIMARY_ATA,
	INT_SECONDARY_ATA
};

enum {
	MBOOT_MEM_0,
	MBOOT_MEM_AVAILABLE,
	MBOOT_MEM_RESERVED,
	MBOOT_MEM_ACPI_RECLAIMABLE,
	MBOOT_MEM_NVS,
	MBOOT_MEM_BAD
};

#define PAGE_SIZE 4096
#define VMM_MAGIC 0x420F1337

#endif
